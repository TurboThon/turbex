services:
  turbex-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      turbex-backend:
        condition: service_healthy

    ports:
      - "8080:80"
    environment:
      TURBEX_BACK_HOST: turbex-backend # This should match the name of the backend container in the compose file
      TURBEX_BACK_PORT: 8000
    networks:
      - turbex-internal-network
      - turbex-external-network

  turbex-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: turbex-database # This should match the name of the container in the compose file
      DB_PORT: 27017
      DB_NAME: ${TURBEX_DB_NAME:-turbex}
      DB_USER: ${TURBEX_DB_USER:-turbex-mongo-user}
      DB_PASS: ${TURBEX_DB_PASS:-v0J9ewQq0Y4d78uj4eIXiSoGK}
    healthcheck:
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 0s
    depends_on:
      turbex-database:
        condition: service_healthy
    networks:
      - turbex-internal-network

  turbex-database:
    image: mongo:5.0.25
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-mongo-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS:-ezGMKpzGUfsAtvYbkmi5nUDDh}
      MONGO_INITDB_DATABASE: ${TURBEX_DB_NAME:-turbex}
      TURBEX_DB_USER: ${TURBEX_DB_USER:-turbex-mongo-user}
      TURBEX_DB_PASS: ${TURBEX_DB_PASS:-v0J9ewQq0Y4d78uj4eIXiSoGK}
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      # start_period: 40s
    volumes:
      - turbex_mongodb_vol:/data/db
      - ./deployment/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - turbex-internal-network

networks:
  turbex-internal-network:
    internal: true
  turbex-external-network:

volumes:
  turbex_mongodb_vol:
